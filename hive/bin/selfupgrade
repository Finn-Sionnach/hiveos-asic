#!/bin/sh

[ -e "/usr/bin/compile_time" ] && ASIC_MODEL=`sed -n 2p /usr/bin/compile_time`
[ -e "/opt/system/bank.conf" ] && ASIC_MODEL="ebit"
[ -e "/etc/hwrevision" ] && ASIC_MODEL=`cut -d\  -f 2 /etc/hwrevision`
release=`curl -f --silent -L --insecure https://raw.githubusercontent.com/minershive/hiveos-asic/master/hive/etc/VERSION`
exitcode=$?
version=0
[ -e /hive/etc/VERSION ] && version=`cat /hive/etc/VERSION`
filename=v$release.tar.gz

t=`df -h | grep  '/tmp' | awk '{print $NF}'`
[ -z $t ] && t='/tmp'

cd $t
rm -rf /tmp/hive/*
rm -rf /tmp/hiveos-asic*
rm -rf /tmp/selfupgrade
rm -rf /tmp/master.tar.gz
rm -rf /tmp/v*.tar.gz

if [ $release == $version ]; then
	if [ "$1" != "master" ]; then
		if [ "$2" != "-f" ]; then
			[ -e /hive/bin/colors ] && source /hive/bin/colors
			echo -e "${GREEN}Hive is up to date already${NOCOLOR}"
			exit $exitcode
		fi
	fi
fi
if [ $exitcode -ne 0 ] || [ -z $release ]; then
	echo "Can't get current version from repository"
	exit $exitcode
fi
if [ $# != "0" ]; then
	release=$1
	if [ $release == "master" ]; then
		filename=$release.tar.gz
	else
		filename=v$release.tar.gz
	fi
fi
url=http://github.com/minershive/hiveos-asic/archive/$filename

[ -e $filename ] && rm $filename

echo $url

echo "> Downloading $url"
curl -L --insecure -O $url
[ $? -ne 0 ] && echo "Error downloading $url" && exit 1

sleep 2


install_antminer_bmminer() { # bmminer, / - rw, cron
	echo ""
	echo "> Extracting $filename"
	tar -xzv -f $filename
	rm -rf hiveos-asic-$release/hive/sbin/teleconsole
	cp -rf hiveos-asic-$release/* /
	[ $? -ne 0 ] && echo "Error extracting $filename" && exit 1

	rm $filename

	sleep 2

	export PATH=$PATH:/hive/bin:/hive/sbin
	export LD_LIBRARY_PATH=/hive/lib

	/hive/bin/hive

	sleep 2

	#$FARM_HASH can be defined externally
	bash -c "/hive/bin/firstrun $FARM_HASH"
}

install_antminer_cgminer() { # cgminer, / - ro, no cron
	echo ""
	echo "> Extracting $filename"
	if [ ! -d /config/hive ]; then
		mkdir /config/hive
	fi
	tar -xzv -f $filename
	cp -rf hiveos-asic-$release/* /config/hive/
	[ $? -ne 0 ] && echo "Error extracting $filename" && exit 1

	rm $filename

	sleep 2

	export PATH=$PATH:/hive/bin:/hive/sbin
	export LD_LIBRARY_PATH=/hive/lib
	
	if [ ! -e /hive ]; then
		ln -s /config/hive/hive/ /hive
		ln -s /config/hive/hive-config/ /hive-config
		ln -s /config/hive/home/root/.profile /home/root/.profile
	fi

	if grep "### HIVE AUTORUN ###" /config/network.conf || grep "ln -s /config/hive/hive/ /hive" /config/network.conf; then
		echo "/config/network.conf skip"
	else
		cat >> /config/network.conf <<FILEEOF

### HIVE AUTORUN ###
[ -e /config/hive_autorun ] && nohup /bin/sh -c '/config/hive_autorun' > /dev/null 2>&1 &
FILEEOF
	fi
	cp -rf /hive/bin/hive_autorun /config/hive_autorun
	/hive/bin/hive

	#on cgminer's antminer no cron daemon, run tasks in background
	nohup bash -c 'sleep 60; /hive/bin/cron1' > /dev/null 2>&1 &
	nohup bash -c 'sleep 60; /hive/bin/cron2' > /dev/null 2>&1 &

	sleep 2

	#$FARM_HASH can be defined externally
	bash -c "/hive/bin/firstrun $FARM_HASH"
}

install_antminer_Z9_cgminer() { # cgminer, / - rw, no cron
	rm -rf /hive/sbin/teleconsole
	if [[ -e /hive && ! -L /hive ]]; then
		mkdir -p /config/hive
		mv -f /hive /config/hive/
		mv -f /hive-config /config/hive/
		mv -f /home/root/.profile /config/hive/home/root/
		ln -s /config/hive/hive/ /hive
		ln -s /config/hive/hive-config/ /hive-config
		ln -s /config/hive/home/root/.profile /home/root/.profile
	fi
	echo ""
	echo "> Extracting $filename"
	if [ ! -d /config/hive ]; then
		mkdir /config/hive
	fi
	tar -xzv -f $filename
	rm -rf hiveos-asic-$release/hive/sbin/teleconsole
	cp -rf hiveos-asic-$release/* /config/hive/
	[ $? -ne 0 ] && echo "Error extracting $filename" && exit 1

	rm $filename

	sleep 2

	export PATH=$PATH:/hive/bin:/hive/sbin
	export LD_LIBRARY_PATH=/hive/lib

	if [ ! -e /hive ]; then
		ln -s /config/hive/hive/ /hive
		ln -s /config/hive/hive-config/ /hive-config
		ln -s /config/hive/home/root/.profile /home/root/.profile
	fi
	
	if grep "### HIVE AUTORUN ###" /config/network.conf || grep "ln -s /config/hive/hive/ /hive" /config/network.conf; then
		echo "/config/network.conf skip"
	else
		cat >> /config/network.conf <<FILEEOF

### HIVE AUTORUN ###
[ -e /config/hive_autorun ] && nohup /bin/sh -c '/config/hive_autorun' > /dev/null 2>&1 &
FILEEOF
	fi
	cp -rf /hive/bin/hive_autorun /config/hive_autorun
	/hive/bin/hive

	#on cgminer's antminer no cron daemon, run tasks in background
	nohup bash -c 'sleep 60; /hive/bin/cron1' > /dev/null 2>&1 &
	nohup bash -c 'sleep 60; /hive/bin/cron2' > /dev/null 2>&1 &

	sleep 2

	#$FARM_HASH can be defined externally
	bash -c "/hive/bin/firstrun $FARM_HASH"
}


install_innosilicon() {
	echo ""
	mount -o remount,rw,relatime,ubi=0,vol=0 -t ubifs ubi0:rootfs /
	echo "> Extracting $filename"
	if [ ! -d /config/hive ]; then
		mkdir -p /config/hive
		mkdir /hive
	fi
	tar -xzv -f $filename
	cp -rf hiveos-asic-$release/hive-config /config/hive/
	cp -rf hiveos-asic-$release/hive/bin /config/hive/
	cp -rf hiveos-asic-$release/hive/etc /config/hive/
	cp -rf hiveos-asic-$release/hive/sbin /hive/
	cp -rf hiveos-asic-$release/hive/lib /hive/
	cp -rf hiveos-asic-$release/home/root/.profile /etc/profile.d/hive.sh
	cp -rf hiveos-asic-$release/hive/share/innosilicon/* /etc/systemd/system/
	[ $? -ne 0 ] && echo "Error extracting $filename" && exit 1

	rm $filename

	sleep 2

	export PATH=$PATH:/hive/bin:/hive/sbin
	export LD_LIBRARY_PATH=/hive/lib
	
	[ ! -L /hive/bin ] && [ ! -e /hive/bin ] && ln -s /config/hive/bin /hive/bin
	[ ! -L /hive/etc ] && [ ! -e /hive/etc ] && ln -s /config/hive/etc /hive/etc
	[ ! -L /hive-config ] && [ ! -e /hive-config ] && ln -s /config/hive/hive-config/ /hive-config
	[ ! -L /hive/sbin/nc ] && [ ! -e /hive/sbin/nc ] && ln -s /hive/sbin/busybox.nosuid /hive/sbin/nc

	#systemd autorun and cron
	systemctl daemon-reload
	systemctl is-enabled hive.service > /dev/null
	[[ $? == 1 ]] && systemctl enable hive.service
	systemctl start hive.service
	systemctl is-enabled hive-agent-screen.timer > /dev/null
	[[ $? == 1 ]] && systemctl enable hive-agent-screen.timer
	systemctl start hive-agent-screen.timer
	systemctl is-enabled hive-cache-ip.timer > /dev/null
	[[ $? == 1 ]] && systemctl enable hive-cache-ip.timer
	systemctl start hive-cache-ip.timer

	sleep 2
	nohup sync && sleep 600 && mount -o remount,ro,relatime,ubi=0,vol=0 -t ubifs ubi0:rootfs / &

	#$FARM_HASH can be defined externally
	bash -c "/hive/bin/firstrun $FARM_HASH"
}





if [ "$ASIC_MODEL" == "Antminer S9" ]; then
	echo "Install Antminer S9"
	install_antminer_bmminer
elif [ "$ASIC_MODEL" == "Antminer S9i" ]; then
	echo "Install Antminer S9i"
	install_antminer_bmminer
elif [ "$ASIC_MODEL" == "Antminer S9j" ]; then
	echo "Install Antminer S9j"
	install_antminer_bmminer
elif [ "$ASIC_MODEL" == "Antminer S9 Hydro" ]; then
	echo "Install Antminer S9 Hydro"
	install_antminer_bmminer
elif echo "$ASIC_MODEL" | grep -q -s -F "Antminer S9 (vnish"; then
	echo "Install Antminer S9 vnish"
	install_antminer_bmminer
elif [ "$ASIC_MODEL" == "Antminer " ]; then
	echo "Install Antminer B3"
	install_antminer_bmminer
elif [ "$ASIC_MODEL" == "Antminer A3" ]; then
	echo "Install Antminer A3"
	install_antminer_cgminer
elif [ "$ASIC_MODEL" == "Antminer D3" ]; then
	echo "Install Antminer D3"
	install_antminer_cgminer
elif echo "$ASIC_MODEL" | grep -q -s -F "Antminer D3 Blissz"; then
	echo "Install Antminer D3 Blissz"
	install_antminer_cgminer
elif echo "$ASIC_MODEL" | grep -q -s -F "Antminer L3 Blissz"; then
	echo "Install Antminer L3 Blissz"
	install_antminer_cgminer
elif [ "$ASIC_MODEL" == "Antminer L3+" ]; then
	echo "Install Antminer L3+"
	install_antminer_cgminer
elif [ "$ASIC_MODEL" == "Antminer L3++" ]; then
	echo "Install Antminer L3++"
	install_antminer_cgminer
elif [ "$ASIC_MODEL" == "Antminer Z9-Mini" ]; then
	echo "Install Antminer Z9-Mini"
	install_antminer_Z9_cgminer
elif [ "$ASIC_MODEL" == "Antminer Z9" ]; then
	echo "Install Antminer Z9"
	install_antminer_Z9_cgminer
elif [ "$ASIC_MODEL" == "Antminer X3" ]; then
	echo "Install Antminer X3"
	install_antminer_cgminer
elif [ "$ASIC_MODEL" == "Antminer S7" ]; then
	echo "Install Antminer S7"
	install_antminer_cgminer
elif [ "$ASIC_MODEL" == "Antminer T9+" ]; then
	echo "Install Antminer T9+"
	install_antminer_bmminer
elif [ "$ASIC_MODEL" == "Antminer T9" ]; then
	echo "Install Antminer T9"
	install_antminer_bmminer
elif [ "$ASIC_MODEL" == "Antminer E3" ]; then
	echo "Install Antminer E3"
	install_antminer_bmminer
elif [ "$ASIC_MODEL" == "b29+.g19" ]; then
	echo "Install Innosilicon A9"
	install_innosilicon
elif [ "$ASIC_MODEL" == "d9.g19" ]; then
	echo "Install Innosilicon D9"
	install_innosilicon
elif [ "$ASIC_MODEL" == "s11.g19" ]; then
	echo "Install Innosilicon S11"
	install_innosilicon
else
	echo "Not found $ASIC_MODEL"
	exit 1
fi

. /hive/bin/colors

#Don't restart it...
#echo -e "> Saying hello to server again"
#hello restartminer

#Restart agent
echo -e "> Restarting agent"
screen -S agent -X quit
agent-screen dontattach

echo -e "${GREEN}Upgrade complete. Have a happy mining.${NOCOLOR}"

sync
exit 0
